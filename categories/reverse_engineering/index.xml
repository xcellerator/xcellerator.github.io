<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reverse_engineering on TheXcellerator</title>
    <link>/categories/reverse_engineering/</link>
    <description>Recent content in reverse_engineering on TheXcellerator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Harvey Phillips 2020 - London, England</copyright>
    <lastBuildDate>Sat, 17 Oct 2020 15:00:00 +0100</lastBuildDate><atom:link href="/categories/reverse_engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bleeding Tooth Deep Dive</title>
      <link>/posts/bleeding_tooth/</link>
      <pubDate>Sat, 17 Oct 2020 15:00:00 +0100</pubDate>
      
      <guid>/posts/bleeding_tooth/</guid>
      <description>A few days ago, Google&amp;rsquo;s research team published an information leak vulnerability in the Linux bluetooth stack along with a very nice poc.
In this post, I want to go through and dissect this poc to identify exactly what the vulnerability is and how it&amp;rsquo;s been fixed. This is the first kernel vulnerability that I&amp;rsquo;ve dove into deeply and I&amp;rsquo;ve found it to be surprisingly simple and straightforward.
The vulnerability itself, dubbed Bleeding Tooth by Google, is able to leak values from the kernel&amp;rsquo;s stack memory.</description>
    </item>
    
    <item>
      <title>BootNoodle: A Palindromic Bootloader for BGGP</title>
      <link>/posts/bggp/</link>
      <pubDate>Tue, 23 Jun 2020 20:37:00 +0100</pubDate>
      
      <guid>/posts/bggp/</guid>
      <description>You can find the git repo with the finished submission here: BootNoodle
 A few days ago (as of writing), @netspooky announced the first (hopefully annual!) Binary Golf Grand Prix on Twitter. The objective was to create a binary of any sort that is the same forwards as it is byte-reversed, but with an emphasis on creating as small a binary as possible, hence golfing.
This was one of those challenges where I thought that I had no chance of even creating a qualifying submission, so it&amp;rsquo;s better to just wait for the results and admire the work of everyone else.</description>
    </item>
    
    <item>
      <title>Reversing Yubikey&#39;s Static Password</title>
      <link>/posts/yubikey/</link>
      <pubDate>Tue, 11 Jun 2019 14:35:00 +0100</pubDate>
      
      <guid>/posts/yubikey/</guid>
      <description>One of the functions that that Yubikey can provide is the option to &amp;ldquo;store&amp;rdquo; a static password on the token which will be &amp;ldquo;typed&amp;rdquo; out on the host whenever you press the button. Having already done quite of a lot of work on the USB HID implementation, I was curious to know how Yubico had decided to emulate the keyboard functionality. Ultimately, I was hoping that I&amp;rsquo;d be able to set all kinds of different modifiers like Ctrl+Alt+Del and Super+R to have a little more fun with it (BadUSB/Rubber Ducky style).</description>
    </item>
    
  </channel>
</rss>
