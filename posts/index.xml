<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on TheXcellerator</title>
    <link>/posts/</link>
    <description>Recent content in Posts on TheXcellerator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Harvey Phillips 2020 - London, England</copyright>
    <lastBuildDate>Sat, 23 Sep 2023 12:00:00 +0100</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BGGP 4: How Low Can You Go?</title>
      <link>/posts/bggp4/</link>
      <pubDate>Sat, 23 Sep 2023 12:00:00 +0100</pubDate>
      
      <guid>/posts/bggp4/</guid>
      <description>Guess who&amp;rsquo;s back? The Binary Golf Grand Prix is back for it&amp;rsquo;s fourth annual outing! Sadly, after getting nerdsniped last year by the one and only @netspooky, I ended up not submitting an entry for last year&amp;rsquo;s competition (you can see what I got up to instead here).
This year, the theme was self replication. To avoid being sent active virii, the Binary Golf Association required that the entry created only a single copy of itself, and did not re-execute itself.</description>
    </item>
    
    <item>
      <title>Tetsuji: Remote Code Execution on a GameBoy Colour 22 Years Later</title>
      <link>/posts/tetsuji/</link>
      <pubDate>Sat, 27 Aug 2022 02:00:00 +0100</pubDate>
      
      <guid>/posts/tetsuji/</guid>
      <description>Introduction It&amp;rsquo;s that time of year again - the Binary Golf Grand Prix is back for a third year running! You can also check out my entries to the first and second times this amazing competition ran.
The theme this year was to produce a binary that crashes a given program. Bonus points for hijacking execution, and submitting a patch to the project that fixes the vulnerability. Coinciding with the announcement of this year&amp;rsquo;s competition, @netspooky told me about a little-known accessory for the GameBoy/GameBoy Colour/GameBoy Advance called the Mobile Adapter GB, which let players connect their console to the internet via their mobile phone.</description>
    </item>
    
    <item>
      <title>Janus: A Polyglot Binary for BGGP 2021</title>
      <link>/posts/bggp21/</link>
      <pubDate>Thu, 16 Sep 2021 12:00:00 +0100</pubDate>
      
      <guid>/posts/bggp21/</guid>
      <description>This year, @netspooky announced another round of the Binary Golf Grand Prix. If you missed it last year, the challenge was to create a palindromic binary - you can see the writeup of my entry, BootNoodle, here. This time around, the theme was polyglots, i.e. the challenge was to create a binary (as small as possible - hence the Golf part&amp;hellip;) that was simulateously another filetype.
The rules were laid out very clearly into 2 categories: first - the smallest file that satisfied all the rules wins; second - rack up points by overlapping more and more filetypes with the bytes of your host binary.</description>
    </item>
    
    <item>
      <title>Linux Rootkits: New Methods for Kernel 5.7&#43;</title>
      <link>/posts/linux_rootkits_11/</link>
      <pubDate>Mon, 11 Jan 2021 17:00:00 +0000</pubDate>
      
      <guid>/posts/linux_rootkits_11/</guid>
      <description>What&amp;rsquo;s Going On? Back in February 2020, there were some stirrings on the LKML about unexporting kallsyms_lookup_name() from the kernel. The main reason for this is that unscrupulous module developers will often simply add MODULE_LICENSE(&#39;GPL&#39;) to their code (without actually licensing their module as such). Then, using kallsyms_lookup_name(), they can use any other exported kernel function to their heart&amp;rsquo;s content. The kernel developers don&amp;rsquo;t like this because it enables out-of-tree modules to call non-exported functions.</description>
    </item>
    
    <item>
      <title>Fancy Bear&#39;s a Lumberjack and It&#39;s Okay - A Dive into the Kernel Component of Drovorub</title>
      <link>/posts/linux_rootkits_10/</link>
      <pubDate>Thu, 29 Oct 2020 12:00:00 +0100</pubDate>
      
      <guid>/posts/linux_rootkits_10/</guid>
      <description>What&amp;rsquo;s In A Name? Back in August, the NSA and FBI jointly issued a Cybersecurity Advisory on a previously undisclosed piece of malware developed by the Russian GRU called &amp;ldquo;Drovorub&amp;rdquo; - a name that comes from the Russian words &amp;ldquo;дрово&amp;rdquo; and &amp;ldquo;руб&amp;rdquo;, which together translate to &amp;ldquo;woodcutter&amp;rdquo; or, as I&amp;rsquo;m taking it, &amp;ldquo;lumberjack&amp;rdquo;.
What made this particular malware more interesting than usual is that it included a kernel module rootkit! In this post, I want to go through some of the techniques that this kernel module uses and how it relates to the techniques that we&amp;rsquo;ve already covered in other posts.</description>
    </item>
    
    <item>
      <title>Bleeding Tooth Deep Dive</title>
      <link>/posts/bleeding_tooth/</link>
      <pubDate>Sat, 17 Oct 2020 15:00:00 +0100</pubDate>
      
      <guid>/posts/bleeding_tooth/</guid>
      <description>A few days ago, Google&amp;rsquo;s research team published an information leak vulnerability in the Linux bluetooth stack along with a very nice poc.
In this post, I want to go through and dissect this poc to identify exactly what the vulnerability is and how it&amp;rsquo;s been fixed. This is the first kernel vulnerability that I&amp;rsquo;ve dove into deeply and I&amp;rsquo;ve found it to be surprisingly simple and straightforward.
The vulnerability itself, dubbed Bleeding Tooth by Google, is able to leak values from the kernel&amp;rsquo;s stack memory.</description>
    </item>
    
    <item>
      <title>Linux Rootkits Part 9: Hiding Logged In Users (Modifying File Contents Without Touching Disk)</title>
      <link>/posts/linux_rootkits_09/</link>
      <pubDate>Fri, 16 Oct 2020 12:00:00 +0100</pubDate>
      
      <guid>/posts/linux_rootkits_09/</guid>
      <description>Let&amp;rsquo;s see if we can hide the fact that a user is logged in! The idea is that we&amp;rsquo;ll be able to spawn a shell or login in as some user (we&amp;rsquo;ll choose root) and not have it show up in the output of tools like who or finger.
Looking at the output of who, we see a list of all the active terminal devices and the users associated to them.</description>
    </item>
    
    <item>
      <title>Linux Rootkits Part 8: Hiding Open Ports</title>
      <link>/posts/linux_rootkits_08/</link>
      <pubDate>Fri, 02 Oct 2020 12:00:00 +0100</pubDate>
      
      <guid>/posts/linux_rootkits_08/</guid>
      <description>Most userspace system tools just parse and manipulate data from one or more files and present them nicely to STDOUT. We&amp;rsquo;ve already seen this with processes (see Part 7), but this time we&amp;rsquo;re going to do the same thing with open ports. By the end, we&amp;rsquo;ll be able to open a listener on port 8080 (any port would do) without it showing up in things like netstat.
Assuming that a file is being read from, we need to try to find out which one.</description>
    </item>
    
    <item>
      <title>Linux Rootkits Part 7: Hiding Processes</title>
      <link>/posts/linux_rootkits_07/</link>
      <pubDate>Thu, 01 Oct 2020 12:00:00 +0100</pubDate>
      
      <guid>/posts/linux_rootkits_07/</guid>
      <description>Now that we know how to hide directories (see last time), we can also hide processes! This is because nearly all userspace tools that give us information about processes just read the contents of the /proc/ filesystem. We can check this by looking at the output of strace -e openat ps or strace -e openat top. So, if we hide directories with the name of the PID we want to keep secret, then these userspace tools won&amp;rsquo;t notice that the process is there!</description>
    </item>
    
    <item>
      <title>Privileged Container Escapes with Kernel Modules</title>
      <link>/posts/docker_escape/</link>
      <pubDate>Sun, 27 Sep 2020 10:00:00 +0100</pubDate>
      
      <guid>/posts/docker_escape/</guid>
      <description>In all the playing around I&amp;rsquo;ve been doing with Linux kernel modules, I decided to see what would happen if you tried to load one from a Docker container. It turns out that privileged containers (or just those with CAP_SYS_MODULE) are able to use the sys_init_module() and sys_finit_module() syscalls - which are what&amp;rsquo;s used to load kernel modules. As all containers share their kernel with the host (unlike VMs), this clearly results in yet another complete system compromise.</description>
    </item>
    
    <item>
      <title>Linux Rootkits Part 6: Hiding Directories</title>
      <link>/posts/linux_rootkits_06/</link>
      <pubDate>Sat, 19 Sep 2020 19:00:00 +0100</pubDate>
      
      <guid>/posts/linux_rootkits_06/</guid>
      <description>At this point, we&amp;rsquo;ve used several different techniques to manipulate the kernel into doing interesting things. We&amp;rsquo;re going to combine a few of these techniques now in order to hide certain files and directories from userspace. This post is probably the most intricate yet due to the fact that we have to manipulate the structure returned by the kernel to userspace.
Roughly speaking, directory listing is handled by the syscall sys_getdents64 and its 32-bit counterpart sys_getdents (we&amp;rsquo;ll want to hook both, but they are identical except for a small addition in the 32-bit version).</description>
    </item>
    
    <item>
      <title>Linux Rootkits Part 5: Hiding Kernel Modules from Userspace</title>
      <link>/posts/linux_rootkits_05/</link>
      <pubDate>Thu, 17 Sep 2020 19:00:00 +0100</pubDate>
      
      <guid>/posts/linux_rootkits_05/</guid>
      <description>So far, we&amp;rsquo;ve seen how hooking both syscalls and regular functions can be put to good use. But, seeing as how this is a series on rootkits, we should really be making some considerations on stealth. If you&amp;rsquo;ve been following along, then once you&amp;rsquo;d loaded any of the previous rootkits, it&amp;rsquo;s presence would have been revealed by simply examining the output of lsmod.
$ lsmod | grep rootkit rootkit 16384 0 Pretty obvious, right?</description>
    </item>
    
    <item>
      <title>Linux Rootkits Part 4: Backdooring PRNGs by Interfering with Char Devices</title>
      <link>/posts/linux_rootkits_04/</link>
      <pubDate>Wed, 09 Sep 2020 21:00:00 +0100</pubDate>
      
      <guid>/posts/linux_rootkits_04/</guid>
      <description>We saw in Part 3 how easy it is to add some extra functionality to a syscall. This time we&amp;rsquo;re going to target a pair of kernel functions that are not syscalls, and can&amp;rsquo;t be called directly. To understand what these are, it&amp;rsquo;s worth discussing char devices a little first.
Char Devices in Linux Although you might not recognise the name, you&amp;rsquo;re probably already pretty familiar with a bunch of char (or chararacter) devices already.</description>
    </item>
    
    <item>
      <title>Linux Rootkits Part 3: A Backdoor to Root</title>
      <link>/posts/linux_rootkits_03/</link>
      <pubDate>Sat, 29 Aug 2020 21:00:00 +0100</pubDate>
      
      <guid>/posts/linux_rootkits_03/</guid>
      <description>Now that you know how to make a Linux kernel module that can hook any exposed function in kernel memory (Part 1 and Part 2), let&amp;rsquo;s get down to writing a hook that does something interesting!
In this first example, we&amp;rsquo;re going to make a rootkit that intercepts calls to sys_kill. 99% of the time, we only use sys_kill (the userspace tool we normally use is the familiar kill) to kill a process, i.</description>
    </item>
    
    <item>
      <title>Linux Rootkits Part 2: Ftrace and Function Hooking</title>
      <link>/posts/linux_rootkits_02/</link>
      <pubDate>Wed, 26 Aug 2020 21:00:00 +0100</pubDate>
      
      <guid>/posts/linux_rootkits_02/</guid>
      <description>Okay, so you&amp;rsquo;ve built your first kernel module, but now you want to make it do something cool - something like altering the behaviour of the running kernel. The way we do this is by function hooking, but the question is - how do we know which functions to hook?
Luckily for us, there is already a great list of potential targets: syscalls! Syscalls (or system calls) are kernel functions that can be called from userspace, and are required for almost anything remotely interesting.</description>
    </item>
    
    <item>
      <title>Coming soon!</title>
      <link>/posts/check_back_soon/</link>
      <pubDate>Tue, 25 Aug 2020 21:00:00 +0100</pubDate>
      
      <guid>/posts/check_back_soon/</guid>
      <description>Check back soon for more!</description>
    </item>
    
    <item>
      <title>Linux Rootkits Part 1: Introduction and Workflow</title>
      <link>/posts/linux_rootkits_01/</link>
      <pubDate>Tue, 25 Aug 2020 21:00:00 +0100</pubDate>
      
      <guid>/posts/linux_rootkits_01/</guid>
      <description>Learning about Linux rootkits is a great way to learn more about how the kernel works. What&amp;rsquo;s great about it is that, unless you really understand what the kernel is doing, your rootkit is unlikely to work, so it serves as a fantasic verifier.
In the FreeBSD world, you can find Joseph Kong&amp;rsquo;s amazing book Designing BSD Rootkits. It was written in 2009, so is actually pretty outdated - which means that you have to do quite a bit of research to get the sample progras to work on modern FreeBSD.</description>
    </item>
    
    <item>
      <title>BootNoodle: A Palindromic Bootloader for BGGP</title>
      <link>/posts/bggp/</link>
      <pubDate>Tue, 23 Jun 2020 20:37:00 +0100</pubDate>
      
      <guid>/posts/bggp/</guid>
      <description>You can find the git repo with the finished submission here: BootNoodle
A few days ago (as of writing), @netspooky announced the first (hopefully annual!) Binary Golf Grand Prix on Twitter. The objective was to create a binary of any sort that is the same forwards as it is byte-reversed, but with an emphasis on creating as small a binary as possible, hence golfing.
This was one of those challenges where I thought that I had no chance of even creating a qualifying submission, so it&amp;rsquo;s better to just wait for the results and admire the work of everyone else.</description>
    </item>
    
    <item>
      <title>Reversing Yubikey&#39;s Static Password</title>
      <link>/posts/yubikey/</link>
      <pubDate>Tue, 11 Jun 2019 14:35:00 +0100</pubDate>
      
      <guid>/posts/yubikey/</guid>
      <description>One of the functions that that Yubikey can provide is the option to &amp;ldquo;store&amp;rdquo; a static password on the token which will be &amp;ldquo;typed&amp;rdquo; out on the host whenever you press the button. Having already done quite of a lot of work on the USB HID implementation, I was curious to know how Yubico had decided to emulate the keyboard functionality. Ultimately, I was hoping that I&amp;rsquo;d be able to set all kinds of different modifiers like Ctrl+Alt+Del and Super+R to have a little more fun with it (BadUSB/Rubber Ducky style).</description>
    </item>
    
  </channel>
</rss>
