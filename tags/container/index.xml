<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>container on TheXcellerator</title>
    <link>/tags/container/</link>
    <description>Recent content in container on TheXcellerator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Harvey Phillips 2020 - London, England</copyright>
    <lastBuildDate>Sun, 27 Sep 2020 10:00:00 +0100</lastBuildDate><atom:link href="/tags/container/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Privileged Container Escapes with Kernel Modules</title>
      <link>/posts/docker_escape/</link>
      <pubDate>Sun, 27 Sep 2020 10:00:00 +0100</pubDate>
      
      <guid>/posts/docker_escape/</guid>
      <description>In all the playing around I&amp;rsquo;ve been doing with Linux kernel modules, I decided to see what would happen if you tried to load one from a Docker container. It turns out that privileged containers (or just those with CAP_SYS_MODULE) are able to use the sys_init_module() and sys_finit_module() syscalls - which are what&amp;rsquo;s used to load kernel modules. As all containers share their kernel with the host (unlike VMs), this clearly results in yet another complete system compromise.</description>
    </item>
    
  </channel>
</rss>
