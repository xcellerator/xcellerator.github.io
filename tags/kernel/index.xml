<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kernel on TheXcellerator</title>
    <link>/tags/kernel/</link>
    <description>Recent content in kernel on TheXcellerator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Harvey Phillips 2020 - London, England</copyright>
    <lastBuildDate>Thu, 19 Nov 2020 12:00:00 +0000</lastBuildDate><atom:link href="/tags/kernel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring Kernel ASLR in Linux</title>
      <link>/posts/distro_kaslr/</link>
      <pubDate>Thu, 19 Nov 2020 12:00:00 +0000</pubDate>
      
      <guid>/posts/distro_kaslr/</guid>
      <description>Why bother with kernel ASLR? I&amp;rsquo;ve been spending a lot of time looking at Linux kernel exploitation techniques - in particular how kernel ASLR, SMAP, SMEP and Page Table Isolation put hurdles in the way of compromise. Everyone reading this has probably heard of ASLR, or Address Space Layout Randomization. Ultimately, it&amp;rsquo;s goal is to make memory addresses of useful objects unpredictable so that an exploit can&amp;rsquo;t hardcode anything.
Where it get&amp;rsquo;s interesting is when ASLR is applied to the kernel (often called kASLR).</description>
    </item>
    
  </channel>
</rss>
