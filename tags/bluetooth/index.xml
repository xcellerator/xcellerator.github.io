<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bluetooth on TheXcellerator</title>
    <link>/tags/bluetooth/</link>
    <description>Recent content in bluetooth on TheXcellerator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Harvey Phillips 2020 - London, England</copyright>
    <lastBuildDate>Sat, 17 Oct 2020 15:00:00 +0100</lastBuildDate><atom:link href="/tags/bluetooth/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bleeding Tooth Deep Dive</title>
      <link>/posts/bleeding_tooth/</link>
      <pubDate>Sat, 17 Oct 2020 15:00:00 +0100</pubDate>
      
      <guid>/posts/bleeding_tooth/</guid>
      <description>A few days ago, Google&amp;rsquo;s research team published an information leak vulnerability in the Linux bluetooth stack along with a very nice poc.
In this post, I want to go through and dissect this poc to identify exactly what the vulnerability is and how it&amp;rsquo;s been fixed. This is the first kernel vulnerability that I&amp;rsquo;ve dove into deeply and I&amp;rsquo;ve found it to be surprisingly simple and straightforward.
The vulnerability itself, dubbed Bleeding Tooth by Google, is able to leak values from the kernel&amp;rsquo;s stack memory.</description>
    </item>
    
  </channel>
</rss>
